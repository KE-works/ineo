#!/bin/bash
# ineo 1.0.0 - Neo4j Instances Manager
# Copyright (C) 2015 Carlos Forero
#
# http://github.com/carlosforero/ineo
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

VERSION=1.0.0

DEFAULT_HOME="$HOME/.ineo"

DEFAULT_VERSION='2.3.0'

DEFAULT_PORT='7474'

# NEO4J_HOSTNAME can be assigned from the environment, so can be changed
# with testing to use tars in tars_for_test folder
NEO4J_HOSTNAME="${NEO4J_HOSTNAME:-http://dist.neo4j.org}"

# INEO_HOSTNAME can be assigned from the environment, so it can be changed
# with testing to use a mock updating
INEO_HOSTNAME="${INEO_HOSTNAME:-http://ineo.cohesivestack.com}"

NEO4J_VERSIONS='  1.9.9\n  2.0.4\n  2.1.8\n  2.2.2\n  2.3.0\n'

UPDATED_AT='Nov 27, 2015'

LOCK_DIR='/tmp/ineo.neo4j.instances.lock'

TEMP_DIR="/tmp/$$.ineo"

# ==============================================================================
# SET INSTANCES FUNCTION
# ==============================================================================

function set_instances {
  if [ -d ${INEO_HOME}/instances ]; then
    local instance_name
    for instance_name in `ls ${INEO_HOME}/instances`; do
      if [ -d  ${INEO_HOME}/instances/${instance_name} ]; then
        INSTANCES+=($instance_name)
      fi
    done;
  fi
}

set_instances

# ==============================================================================
# INVALID COMMAND FUNCTION
# ==============================================================================

function invalid_command_param {
  local param=$1
  local command=$2
  printf "\n  ERROR: Invalid argument or option: $param!\n"
  printf "\n  For help about the command '$command' type:"
  printf "\n  ineo help $command\n"
}

# ==============================================================================
# INSTALL
# ==============================================================================

function install {

  shift
  while getopts ":d:" optname
  do
    case "${optname}" in
      d)
        INEO_HOME=${OPTARG}
        ;;
      *)
        invalid_command_param $OPTARG 'install'
        exit 1
        ;;
    esac
  done

  local arg1=${@:$OPTIND:1}
  if [ ! -z "$arg1" ]; then
    invalid_command_param $arg1 'install'
    exit 1
  fi

  # Set INEO_HOME variable
  if [ -z "$INEO_HOME" ]; then
    INEO_HOME=$DEFAULT_HOME
  fi

  # Check if directory is an absolute directory
  if [[ ! $INEO_HOME =~ ^/ ]]; then
    printf "\n  ERROR: The directory '$INEO_HOME' is not an absolute path!\n"
    printf "\n  Use directories like:"
    printf "\n  /opt/ineo"
    printf "\n  ~/.ineo\n"
    exit 1
  fi

  # Check if directory exists
  if [ -d "$INEO_HOME" ]; then
    printf "\n  ERROR: The directory '$INEO_HOME' already exists!\n"
    printf "\n  If you want reinstall ineo then uninstall it with:"
    printf "\n  ineo uninstall -d $INEO_HOME\n"
    printf "\n  or ensure the directory doesn't contain anything important then remove it with:"
    printf "\n  rm -r $INEO_HOME\n"
    exit 1
  fi

  # Create folders
  local folders=(bin neo4j instances)
  local folder
  for folder in "${folders[@]}"; do
    mkdir "$TEMP_DIR/$folder"
  done

  # self copy to folder bin of ineo
  if [[ `basename "$0"` == 'ineo' ]]; then
    cp $0 ${TEMP_DIR}/bin
  else
    curl -sSL http://getineo.cohesivestack.com > ${TEMP_DIR}/bin/ineo
  fi

  chmod 755 ${TEMP_DIR}/bin/ineo

  # Create variable
  local line_for_bash_profile="export INEO_HOME=$INEO_HOME; export PATH=\$INEO_HOME/bin:\$PATH"

  # If not exists a line with the current Ineo home directory then proceeds to
  # create it
  if ! grep -Fq "$line_for_bash_profile" ~/.bash_profile; then
    # Remove any old set variable
    sed -i.bak '/export INEO_HOME=/d' ~/.bash_profile

    # Add the line in .bash_profile to export the variable
    echo "$line_for_bash_profile" >> ~/.bash_profile
  fi

  # Move the TEMP_DIR to the target directory for ineo
  mv ${TEMP_DIR} $INEO_HOME

  printf "\n  Ineo was successfully installed in $INEO_HOME.\n"
  printf "\n  To start using the 'ineo' command reopen your terminal or enter:"
  printf "\n  source ~/.bash_profile\n"
  exit 0
}

# ==============================================================================
# UNINSTALL
# ==============================================================================

function uninstall {
  local forced=false

  shift
  while getopts ":d:f" optname
  do
    case "${optname}" in
      d)
        INEO_HOME=${OPTARG}
        ;;
      f)
        forced=true
        ;;
      *)
        invalid_command_param $OPTARG 'uninstall'
        exit 1
        ;;
    esac
  done

  local arg1=${@:$OPTIND:1}
  if [ ! -z "$arg1" ]; then
    invalid_command_param $arg1 'uninstall'
    exit 1
  fi

  # Check if INEO_HOME variable is set
  if [ -z "$INEO_HOME" ]; then
    printf "\n  ERROR: The variable '\$INEO_HOME' is not set!\n"
    printf "\n  Are you sure that Ineo is installed?:\n"
    exit 1
  fi

  # Check if the directory is an absolute directory
  if [[ ! $INEO_HOME =~ ^/ ]]; then
    printf "\n  ERROR: The directory '$INEO_HOME' is not an absolute path!\n"
    printf "\n  Use directories like:"
    printf "\n  /opt/ineo"
    printf "\n  ~/.ineo\n"
    exit 1
  fi

  if ! $forced; then
    # Check if the directory exists
    if [ ! -d "$INEO_HOME" ]; then
      printf "\n  ERROR: The directory '$INEO_HOME' doesn't exists!\n"
      printf "\n  Are you sure Ineo is installed?\n"
      exit 1
    fi

    # Check if the directory looks like an Ineo directory
    if [ ! -d "$INEO_HOME/bin" ] || [ ! -d "$INEO_HOME/neo4j" ] || [ ! -d "$INEO_HOME/instances" ]; then
      printf "\n  WARNING: The directory '$INEO_HOME' doesn't look like an Ineo directory!\n\n"
      read -p  "  Are you sure this directory is an Ineo directory? (y/n) " -r
      if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
      fi
    fi

    printf "\n  WARNING: This action will remove everything in '$INEO_HOME'!\n\n"
    read -p  "  Are you sure you want to do this action? (y/n) " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      exit 1
    fi
  fi

  # Remove directory
  rm -r $INEO_HOME

  # Replace the directories separator (/) by (\/), so it can be used with sed
  INEO_HOME=${INEO_HOME//\//\\\/}
  # Remove variable in .bash_profile
  sed -i.bak "/export INEO_HOME=$INEO_HOME; export PATH=\$INEO_HOME\/bin:\$PATH/d" ~/.bash_profile

  printf "\n  Ineo was successfully uninstalled\n"
  exit 0
}

# ==============================================================================
# VERSION
# ==============================================================================

function version {
  if [ ! -z $2 ]; then
    invalid_command_param $2 'version'
    exit 1
  fi

  printf "\n  The installed version of ineo is ${VERSION}\n\n"
}

# ==============================================================================
# UPDATE
# ==============================================================================

function update {
  if [ ! -z $2 ]; then
    invalid_command_param $2 'update'
    exit 1
  fi

  local local_file=$(cd `dirname "${BASH_SOURCE[0]}"` && pwd)/`basename "${BASH_SOURCE[0]}"`

  local remote_file=${TEMP_DIR}/remote_ineo

  curl -s -o $remote_file ${INEO_HOSTNAME}/ineo

  if cmp --silent $local_file $remote_file; then
    printf "\n  The last ineo version already is installed!\nso nothing was updated.\n"
    version
  else
    chmod 700 $remote_file
    $remote_file UPDATE_SCRIPT_BATCH $INEO_HOME $TEMP_DIR $VERSION
  fi
  exit 0
}

# ==============================================================================
# UPDATE_SCRIPT_BATCH
# ==============================================================================

function update_script_batch {

  local ineo_home=$2
  local temp_dir=$3
  local old_version=$4

  local local_file=$(cd `dirname "${BASH_SOURCE[0]}"` && pwd)/`basename "${BASH_SOURCE[0]}"`

  cp $local_file $ineo_home/bin/ineo

  printf "\n  Ineo was successfully upgraded from $old_version to $VERSION\n\n"

}


# ==============================================================================
# CREATE
# ==============================================================================

function create {
  local port=$DEFAULT_PORT
  local version=$DEFAULT_VERSION
  local force_download=false
  local force_install=false

  shift
  while getopts ":p:s:v:df" optname
  do
    case "${optname}" in
      p)
        port=${OPTARG}
        ;;
      s)
        https_port=${OPTARG}
        ;;
      v)
        version=${OPTARG}
        ;;
      d)
        force_download=true
        ;;
      f)
        force_install=true
        ;;
      *)
        invalid_command_param $OPTARG 'create'
        exit 1
        ;;
    esac
  done
  local instance_name=${@:$OPTIND:1}

  shift
  local arg2=${@:$OPTIND:1}
  if [ ! -z "$arg2" ]; then
    invalid_command_param $arg2 'create'
    exit 1
  fi

  # The action create always requires an instance name
  if [[ -z "$instance_name" ]]; then
    printf "\n  ERROR: create requires an instance name!\n"
    printf "\n  For help about the command 'create' type:"
    printf "\n  ineo help create\n"
    exit 1
  fi

  local tar_name="neo4j-community-$version-unix.tar.gz"

  # Donwload and create tar if doesn't exists
  if ! [ -f ${INEO_HOME}/neo4j/${tar_name} ] || $force_download; then
    curl -o ${TEMP_DIR}/${tar_name} ${NEO4J_HOSTNAME}/${tar_name}

    mv ${TEMP_DIR}/${tar_name} ${INEO_HOME}/neo4j/${tar_name}
  fi

  # Create tmp dir to extract
  mkdir -p ${TEMP_DIR}/${version}
  # if is not extracted then the tar maybe is not good, so a message suggesting
  # to use -d option is showed
  if ! tar -xzf ${INEO_HOME}/neo4j/${tar_name} \
    -C ${TEMP_DIR}/${version} &> /dev/null; then
    printf "\n  ERROR: The tar file '${tar_name}' can't be extracted!\n"
    printf "\n  Try run the command 'create' with the -d option to download the tar file again\n"
    exit 1
  fi

  # If directory for the instance exists then a message suggesting run or
  # install with the option -f is showed
  if [ -d ${INEO_HOME}/instances/${instance_name} ] && ! $force_install ; then
    printf "\n  ERROR: A directory for the instance '${instance_name}' already exists!\n"
    printf "\n  Maybe the instance already was created or try run the command 'install' with the -f option to force the installation\n"
    exit 1
  fi

  if $force_install ; then
    rm -rf ${INEO_HOME}/instances/${instance_name}
  fi

  # Create a hidden file with the version used in this installation
  echo $version > ${TEMP_DIR}/${version}/neo4j-community-${version}/.version

  # Finnaly move the instance for installing
  mv ${TEMP_DIR}/${version}/neo4j-community-${version} ${INEO_HOME}/instances/${instance_name}

  # Set the port on the configuration file
  https_port=${https_port:-$((${port} + 1))}
  set_port $instance_name $port
  set_https_port $instance_name $https_port
  printf "\n  The instance ${instance_name} was created successfully\n\n"
}

# ==============================================================================
# ACTIONS
# ==============================================================================

function action {
  local action_name=${@:$OPTIND:1}
  local quiet=false

  shift
  while getopts ":q" optname
  do
    case "${optname}" in
      q)
        quiet=true
        ;;
      *)
        invalid_command_param $OPTARG $action_name
        exit 1
        ;;
    esac
  done

  local instance_name=${@:$OPTIND:1}

  shift
  local arg2=${@:$OPTIND:1}
  if [ ! -z "$arg2" ]; then
    invalid_command_param $arg2 $action_name
    exit 1
  fi

  local instances=()

  # If is not specified the instance name, then apply on all instances
  if [ -z "$instance_name" ]; then
    # If no instances then an error messages
    if [ -z "$INSTANCES" ]; then
      printf "\n  ERROR: No instances created!\n"
      printf "\n  Try create an instance with the command 'ineo create [your_instance_name]'\n\n"
    fi

    # Confirmation for critical actions
    if [[ $action_name == 'start' || $action_name == 'stop' || $action_name == 'restart' ]] && [ "$quiet" == false ]; then
      printf "\n  WARNING: A Neo4j instance name is not specified!\n\n"
      read -p  "  Are you sure you want to ${action_name} all instances? (y/n) " -r
      echo    # (optional) move to a new line
      if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
      fi
    fi
    instances=("${INSTANCES[@]}")
  else
    if [ ! -d ${INEO_HOME}/instances/${instance_name} ]; then
      printf "\n  ERROR: There is not an instance with the name '${instance_name}'!\n"
      printf "\n  You can create an instance with the command 'ineo create ${instance_name}'\n\n"
      exit 1
    fi
    instances[0]=$instance_name
  fi

  local instance_name
  for instance_name in "${instances[@]}"; do
    if [ ! -f ${INEO_HOME}/instances/${instance_name}/bin/neo4j ]; then
      printf "\n  ERROR: The instance '${instance_name}' seems that is not properly installed!\n"
      printf "\n  You can recreate the instance with the command 'ineo create -f ${instance_name}'\n\n"
      exit 1
    fi

    printf "\n  ${action_name} '${instance_name}'\n  "

    ${INEO_HOME}/instances/${instance_name}/bin/neo4j $action_name

  done
  printf "\n"
}

# ==============================================================================
# DESTROY
# ==============================================================================

function destroy {
  local force=false

  shift
  while getopts ":f" optname
  do
    case "${optname}" in
      f)
        force=true
        ;;
      *)
        invalid_command_param $OPTARG 'destroy'
        exit 1
        ;;
    esac
  done

  local instance_name=${@:$OPTIND:1}

  shift
  local arg2=${@:$OPTIND:1}
  if [ ! -z "$arg2" ]; then
    invalid_command_param $arg2 'destroy'
    exit 1
  fi

  # Destroy requires an instance name
  if [[ -z "$instance_name" ]]; then
    printf "\n  ERROR: destroy requires an instance name!\n"
    printf "\n  For help about the command 'destroy' type:"
    printf "\n  ineo help destroy\n"
    exit 1
  fi

  # Check if the directory exists
  if [ ! -d "$INEO_HOME/instances/${instance_name}" ]; then
    printf "\n  ERROR: There is not an instance with the name '${instance_name}'!\n"
    printf "\n  Use 'ineo instances' to list the instances installed\n\n"
    exit 1
  fi

  # Confirm destroy
  if [[ "$force" == false ]]; then
    printf "\n  WARNING: Destroying the instance '${instance_name}' will remove all data for this instance!\n\n"
    read -p  "  Are you sure you want to destroy the '${instance_name}'? (y/n) " -r
    echo    # (optional) move to a new line
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      exit 1
    fi
  fi

  # Check if the instance is running
  if [ -f "$INEO_HOME/instances/${instance_name}/data/neo4j-service.pid" ]; then

    if [[ "$force" == false ]]; then
      printf "\n  WARNING: The instance '${instance_name}' is running!\n\n"
      read -p  "  Are you sure you want to stop '${instance_name}' and destroy? (y/n) " -r
      echo    # (optional) move to a new line
      if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
      fi
    fi

    # Stop the instance
    ${INEO_HOME}/instances/${instance_name}/bin/neo4j stop
  fi

  rm -fr ${INEO_HOME}/instances/${instance_name}

  printf "\n  The instance '${instance_name}' was successfully destroyed.\n\n"
  exit 0

}

# ==============================================================================
# INSTANCES
# ==============================================================================

function instances {
  if [ ! -z $2 ]; then
    invalid_command_param $2 'instances'
    exit 1
  fi

  if [ ${#INSTANCES[@]} -eq 0  ]; then
    printf "\nThere are not any created instance yet.\n\n"
    printf "Create the first one using the command 'create'.\n\n"
    printf "For help about the command 'create' type:\n"
    printf "  ineo help create\n"
  else
    local instance_name
    for instance_name in "${INSTANCES[@]}"; do
      version=$(head -n 1 $INEO_HOME/instances/$instance_name/.version)
      port=$(sed -n '/^org\.neo4j\.server\.webserver\.port=\(.*\)$/s//\1/p' \
        $INEO_HOME/instances/$instance_name/conf/neo4j-server.properties)
      ssl=$(sed -n '/^org\.neo4j\.server\.webserver\.https.port=\(.*\)$/s//\1/p' \
        $INEO_HOME/instances/$instance_name/conf/neo4j-server.properties)

      printf "\n  > instance '$instance_name'"
      printf "\n    VERSION: ${version}"
      printf "\n    PATH:    ${INEO_HOME}/instances/${instance_name}"
      printf "\n    PORT:    ${port}"
      printf "\n    HTTPS:   ${ssl}\n"
    done
    printf "\n"
  fi
}

# ==============================================================================
# SET-PORT
# ==============================================================================

function set_port {
  local instance_name=$1
  local port=$2
  sed -i.bak "/^\(org\.neo4j\.server\.webserver\.port=\).*/s//\1$port/" \
    ${INEO_HOME}/instances/${instance_name}/conf/neo4j-server.properties
}

function set_https_port {
  local instance_name=$1
  local port=$2
  sed -i.bak "/^\(org\.neo4j\.server\.webserver\.https\.port=\).*/s//\1$port/" \
    ${INEO_HOME}/instances/${instance_name}/conf/neo4j-server.properties
}

# Command
function set-port {
  local https=false

  shift
  while getopts ":s" optname
  do
    case "${optname}" in
      s)
        https=true
        ;;
      *)
        invalid_command_param $OPTARG 'set-port'
        exit 1
        ;;
    esac
  done

  local instance_name=${@:$OPTIND:1}

  shift
  local port=${@:$OPTIND:1}

  shift
  local arg=${@:$OPTIND:1}
  if [ ! -z "$arg" ]; then
    invalid_command_param $arg 'set-port'
    exit 1
  fi

  if [ -z "$instance_name" ] || [ -z "$port" ]; then
    printf "\n  ERROR: set-port requires an instance name and a port number!\n"
    printf "\n  For help about the command 'set-port' type:"
    printf "\n  ineo help set-port\n\n"
    exit 1
  fi

  if [[ ! $port =~ ^[0-9]+$ ]]; then
    printf "\n  ERROR: The port must be a positive integer number!\n"
    printf "\n  For help about the command 'set-port' type:"
    printf "\n  ineo help set-port\n\n"
    exit 1
  fi

  if (( port < 1 || port > 65535 )); then
    printf "\n  ERROR: The port must be a number between 1 and 65535!\n"
    printf "\n  For help about the command 'set-port' type:"
    printf "\n  ineo help set-port\n\n"
    exit 1
  fi

  # Check if the configuration file doesn't exists
  if [ ! -f "$INEO_HOME/instances/${instance_name}/conf/neo4j-server.properties" ]; then
    printf "\n  ERROR: There is not an instance with the name '${instance_name}' or is not properly installed!\n"
    printf "\n  Use 'ineo instances' to list the instances installed\n\n"
    exit 1
  fi

  if [[ "$https" == true ]]; then
    set_port $instance_name $port

    printf "\n  The https port was successfully changed to '$port'.\n\n"
  else
    set_https_port $instance_name $port

    printf "\n  The http port was successfully changed to '$port'.\n\n"
  fi

}

# ==============================================================================
# DELETE-DB
# ==============================================================================

# Command
function delete-db {
  local force=false

  shift
  while getopts ":f" optname
  do
    case "${optname}" in
      f)
        force=true
        ;;
      *)
        invalid_command_param $OPTARG 'delete-db'
        exit 1
        ;;
    esac
  done

  local instance_name=${@:$OPTIND:1}

  shift
  local arg=${@:$OPTIND:1}
  if [ ! -z "$arg" ]; then
    invalid_command_param $arg 'delete-db'
    exit 1
  fi

  # delete-db requires an instance name
  if [[ -z "$instance_name" ]]; then
    printf "\n  ERROR: delete-db requires an instance name!\n"
    printf "\n  For help about the command 'delete-db' type:"
    printf "\n  ineo help delete-db\n\n"
    exit 1
  fi

  # Check if the directory exists
  if [ ! -d "$INEO_HOME/instances/${instance_name}" ]; then
    printf "\n  ERROR: There is not an instance with the name '${instance_name}' or is not properly installed!\n"
    printf "\n  Use 'ineo instances' to list the instances installed\n\n"
    exit 1
  fi

  # Confirm delete-db
  if [[ "$force" == false ]]; then
    printf "\n  WARNING: delete-db on the instance '${instance_name}' will remove all data for this instance!\n\n"
    read -p  "  Are you sure you want to continue clearing the data for '${instance_name}'? (y/n) " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
      exit 1
    fi
  fi

  # Check if the instance is running
  if [ -f "$INEO_HOME/instances/${instance_name}/data/neo4j-service.pid" ]; then

    if [[ "$force" == false ]]; then
      printf "\n  WARNING: The instance '${instance_name}' is running!\n\n"
      read -p  "  Are you sure you want to stop '${instance_name}' and clear the data? (y/n) " -r

      if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
      fi
    fi

    # Stop the instance
    ${INEO_HOME}/instances/${instance_name}/bin/neo4j stop
  fi

  if [ ! -d "$INEO_HOME/instances/${instance_name}/data/graph.db" ]; then
    printf "\n  INFO: There is not a database on the instance '${instance_name}', so nothing was removed.\n\n"
    exit 0
  fi

  rm -rf ${INEO_HOME}/instances/${instance_name}/data/graph.db

  printf "\n  The data for the instance '${instance_name}' was successfully removed.\n\n"
  exit 0

}

# ==============================================================================
# VERSIONS
# ==============================================================================

function versions {
  if [ ! -z $2 ]; then
    invalid_command_param $2 'versions'
    exit 1
  fi

  printf "\n  The Neo4J versions available at $UPDATED_AT:\n"
  printf "$NEO4J_VERSIONS"
  printf "\n  More information about Neo4j releases in: http://neo4j.com/download/other-releases\n\n"
}

# ==============================================================================
# HELP
# ==============================================================================

function help {
  if [ -z "$1" ]; then
    printf "$HELP"
  else
    command=$(echo "help_$1" | tr '[:lower:]' '[:upper:]' | tr '-' '_')
    printf "${!command}"
  fi
}

# ==============================================================================
# HELPS
# ==============================================================================

HELP="USAGE:
  ineo <command> [options] [<arguments>]

COMMANDS:

  create      Create a new instance with a specific <name>
  set-port    Change the port of a specific instance <name>
  versions    Show the neo4j versions available for installing
  instances   Show the information about the installed instances

  start       Start neo4j instances
  stop        Stop neo4j instances
  restart     Restart neo4j instances
  status      Show instances status

  delete-db   Delete all data of a specific instance <name>
  destroy     Remove a specific instance <name>

  install     Install ineo
  update      Update ineo
  uninstall   Uninstall ineo

  help        Show this help or help for specific [command]
"

HELP_CREATE="USAGE:
  create [options] <instance_name>

DESCRIPTION:
  Create a new instance

ARGUMENTS:
  <instance_name>  Instance name to create

OPTIONS:
  -p <port>     Http server port for the neo4j instance.

                Default: 7474

  -s <port>     Https server port (SSL port) for the neo4j instance

                Default: <port>+1 (7475 when port is 7474)

  -v <version>  The neo4j version for the instance

                Default: $DEFAULT_VERSION
"

HELP_SET_PORT="USAGE:
  set-port [options] <instance_name> <port_number>

DESCRIPTION:
  Change the port of a specific instance

ARGUMENTS:
  <instance_name>  Instance name to change
  <port_number>    New port number

OPTIONS:
  -s    Use this option for changing the SSL port
"

HELP_VERSIONS="USAGE:
  versions

DESCRIPTION:
  Show the neo4j versions available for installing

  This command show the versions available until the date of the current ineo
  version. If the version you want to install is not listed, perhaps you need
  to update the ineo version
"

HELP_INSTANCES="USAGE:
  instances

DESCRIPTION:
  Show the information about the installed instances
"

HELP_START="USAGE:
  start [options] [instance_names ...]

DESCRIPTION:
  Start one or more neo4j instances

ARGUMENTS:
  [instance_names ...]  Name of one or more instances to start (optional)

                        If this argument is not specified then ineo tries
                        to start all created instances

OPTIONS:
  -q    Start the instances without confirmation
"

HELP_STOP="USAGE:
  stop [options] [instance_names ...]

DESCRIPTION:
  Stop one or more neo4j instances

ARGUMENTS:
  [instance_names ...]  Name of one or more instances to stop (optional)

                        If this argument is not specified then ineo tries
                        to stop all created instances

OPTIONS:
  -q    Stop the instances without confirmation
"

HELP_RESTART="USAGE:
  restart [options] [instance_names ...]

DESCRIPTION:
  Restart one or more neo4j instances

ARGUMENTS:
  [instance_names ...]  Name of one or more instances to restart (optional)

                        If this argument is not specified then ineo tries
                        to restart all created instances

OPTIONS:
  -q    Restart the instances without confirmation
"

HELP_STATUS="USAGE:
  status [instance_names ...]

DESCRIPTION:
  Show the status of one or more neo4j instances

ARGUMENTS:
  [instance_names ...]  Name of one or more instances to show status (optional)

                        If this argument is not specified then ineo tries
                        to show the status of all created instances
"

HELP_DELETE_DB="USAGE:
  delete-db [options] <instance_name>

DESCRIPTION:
  Delete the data files for a specific instance.

  This command delete the data files, so using it is slow on test-driven.

  If you need delete the data for restart it on test-driven, use cypher instead:
    'MATCH (n) OPTIONAL MATCH (n)-[r]-() DELETE n,r;'

ARGUMENTS:
  <instance_name>  Instance name of the data to delete

OPTIONS:
  -f    Delete the data without confirmation
"

HELP_DESTROY="USAGE:
  destroy [options] <instance_name>

DESCRIPTION:
  Destroy a specific instance

ARGUMENTS:
  <instance_name>  Instance name to destroy

OPTIONS:
  -f    Destroy the instance without confirmation
"

HELP_INSTALL="USAGE:
  install [options]

DESCRIPTION:
  Install ineo

  Don't use this command if you already have ineo installed and working
  correctly.

OPTIONS:
  -d <directory_name>  Directory name (absolute path) where ineo will be
                       installed

                       Default: ~/.ineo
"

HELP_UPDATE="USAGE:
  update

DESCRIPTION:
  Update the current installed ineo to the last version available
"

HELP_UNINSTALL="USAGE:
  uninstall [options]

DESCRIPTION:
  Uninstall ineo

OPTIONS:
  -d <directory_name>  Directory name where ineo is installed

                       The default value is the value of the variable
                       \$INEO_HOME if it is configured

  -f                   Try to uninstall without confirmations
"

HELP_HELP="USAGE:
  help [command_name]

DESCRIPTION:
  Show the help for ineo

ARGUMENTS:
  [command_name]  Optional name for displaying the help for a specific command
"

# ==============================================================================
# SET COMMAND VARIABLE
# ==============================================================================

COMMAND=$1

# ==============================================================================
# LOCK FUNCTION
# ==============================================================================

if [ ! "$COMMAND" == "UPDATE_SCRIPT_BATCH" ]; then
  if ! mkdir $LOCK_DIR; then
    echo "\n  FATAL: Lock failed - exit\n\n" >&2
    exit 1
  fi

  if ! mkdir $TEMP_DIR; then
    echo "\n  FATAL: Creating then temp dir '$TEMP_DIR' failed - exit\n\n" >&2
    exit 1
  fi

  trap "rmdir $LOCK_DIR; rm -rf $TEMP_DIR" EXIT
fi

# ==============================================================================
# COMMAND SELECTOR
# ==============================================================================
case $COMMAND in
  install)
    install $@
    ;;
  uninstall)
    uninstall $@
    ;;
  create)
    create $@
    ;;
  destroy)
    destroy $@
    ;;
  console|start|start-no-wait|stop|restart|status|info)
    action $@
    ;;
  delete-db)
    delete-db $@
    ;;
  set-port)
    set-port $@
    ;;
  update)
    update $@
    ;;
  versions)
    versions $@
    ;;
  version)
    version $@
    ;;
  instances)
    instances $@
    ;;
  help)
    help $2
    ;;
  UPDATE_SCRIPT_BATCH)
    update_script_batch $@
    ;;
  *)
    help
    ;;
esac

exit 0
